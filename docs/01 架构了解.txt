
1 梳理知识图谱的能力
  如果发现对这些概念区分不开怎么办？

2 了解能力边界的能力
  如何快速了解webpack可以用来做什么?
    1 打包
    2 压缩
    3 提取css
    4 code split
    ...

3 直奔主题解决问题的能力
  迷惑点: 
    不懂技术，我接下来要做一个公众号网站？（把问别人的问题，在谷歌里面搜索答案）

  具体化: 不用系统全面的了解，解决当下问题即可
    1 查阅资料/收集信息
    2 技术选型
    3 定制计划

4 耐心寻找解决方案
  遇到问题: 用状态机模式写UI到底有没有矿?

  遇到困难你怎么选?
    1 我投入了较长时间没有产出，因此捋一捋问题搁置
      价值取向，问题是什么?怎么解决问题的思维模式
    2 我在积累解决问题的能力，所有的投入都是值得的
    3 我的能力也许不足以解决这个问题
      解决问题的能力需要积累，加强
    4 问题终究会找到答案

5 认真积累未知领域
  被leader批评了有几个变量没有命名好，你应该?
    1 查阅互联网上命名的规范内容
    2 重新学命名的技巧
      -> 是个未知领域，不知道的内容，需要继续完善
    3 反驳: 又不是不能跑? 
      -> 逃避
  关联现象: 每次看技术文档只是看实力代码。
    1 积累都是量变到质变的过程

6 正向的心理暗示
  用react hooks 重构旧项目需要20人日，如何思考?
    1 学习react hooks 这波不亏
    2 重构是学习的过程
    3 用react hooks 终将是提效，收益最终不止20人日

7 探索知识的能力
  常见误区
    1 对框架没有足够深的理解(没有足够的基础)，就开始读vue源码
    2 这个我会(用)了
    3 怎么这么多要学的！什么时候是个头?
    4 学了好像没有什么用?
