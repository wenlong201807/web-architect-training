
nginx

1 静态资源服务器
2 反向代理服务器
3 api接口服务(lua & javascript)

- 问答区
nginx属于中间件
master worker 如何通信？
pipe  消息 信号量控制



- nginx架构
1 轻量
  源代码只包含核心模块
  其他非核心功能都是通过模块实现，可以自由选择
2 架构
  nginx采用的是多进程(单线程)和多路io复用模型
    多进程(单线程): 每个进程都只有一个线程
3 工作流程
  nginx在启动后，会有一个master和多个互相独立的worker进程
  接收来自外界的信号，向各个worker进程发送信号，每个进程都有可能来处理这个连接
  master进程能监控worker进程的运行状态，当worker进程退出后(异常情况下), 会自动启动新的worker进程。
    1 worker进程数, 一般会设置成机器cpu核数，因为更多的worker数，只会导致进程相互竞争cpu，从而带来不必要的上下文切换
    2 使用多进程模式，不仅能提高并发率，而且进程之间相互独立，一个worker进程挂了不会影响到其他worker进程
4 io多路复用
  看图吧  
5 cup亲和
  把cpu内核和nginx的工作进程绑定在一起，让每个worker进程固定在一个cpu上执行，从而减少cpu的切换并提高缓存命中率，提高性能
6 sendfile
  sendfile 零拷贝传输模式




[基础知识补充]
5 进程的阻塞
  1 正在执行的进程，由于期待的某些事未发生，经自己的运行状态变成阻塞状态。
  2 进程的阻塞时进程自身的一种主动行为，也因此只有处于孕形态的进程(获得cpu) ，才可能将其转换为阻塞状态。当进程进入阻塞状态，是不占用cup资源的。
6 文件描述符
  1 文件描述符(file descriptor) 是一个用于表述指向文件的引用的抽象概念。
  2 当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。
7 i/o模式
  对于一次io访问(以read举例) ，数据会先被拷贝到操作系统的内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的缓冲区，最后交给进程。所以说，当一个read操作发生时，他会经历两个阶段:
    1 等待数据准备
    2 将数据从内核拷贝到进程中
8 分类
  1 同步阻塞io
  2 同步非阻塞io
  3 异步阻塞io(io多路复用)
  4 异步非阻塞
9 事件模型
  1 目前支持io多路复用的系统调用有 select、poll、epoll。
  2 io多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪(一般是读就绪或者写就绪)，能够通知程序进行响应的读写操作。
  3 但select、poll、epoll 本质上都是同步io，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的
  - select: 单个进程能打开的最大连接数为1024，因为需要对所有的文件描述符进行线性遍历，所以文件描述符太多会导致性能下降。
  - poll: 和select基本一样，因为用链表存储文件描述符，没有最大连接数限制
  - epoll[最优]: epoll是在每个文件描述符上设置callback来实现，fd就绪后才会调用callback，活跃socket少的话性能高，socket活跃多的话性能低。
  4 轮询和回调的应用场景
    轮询: 每个都很快，总数量少
    回调: 其他情况



