

1 登陆linux 
  $ ssh root@47.98.181.79
  
2 关闭防火墙
  停止防火墙 systemctl stop firewalld.service
  永久关闭防火墙 systemctl disable firewalld.service
3 确认停用selinux
  安全增强型linux (Security-Enhanced Linux) 简称SELinux，它是一个linux内核模块，也是linux的一个安全子系统。
  SELinux 主要作用就是最大限度地减少系统中服务进程可访问的资源(最小权限原则)
  检查状态 getenforce
  检查状态 /usr/sbin/sestatus -v
  临时关闭 setenforce 0
  永久关闭 /etc/selinux/config SELINUX=enforcing 改为 SELINUX=disabled
4 安装依赖模块
  yum -y install gcc gcc-c++ antoconf pcre pcre-devel make automake
  yum -y install wget httpd-tools vim

5 官网安装ngixn
  nginx.org/en/download.html
  nginx-1.1.42
  
  安装方式yum
  https://nginx.org/en/linux_packages.html

  RHEL/CentOS
  1 $ yum install yum-utils
  2 添加安装源
  $ vim /etc/yum.repos.d/nginx.repo # 将一下内容复制到这个文件内
  [nginx-stable]
  name=nginx stable repo
  baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
  gpgcheck=1
  enabled=1
  gpgkey=https://nginx.org/keys/nginx_signing.key
  module_hotfixes=true
  
  [nginx-mainline]
  name=nginx mainline repo
  baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/
  gpgcheck=1
  enabled=0
  gpgkey=https://nginx.org/keys/nginx_signing.key
  module_hotfixes=true
  3 查看可安装的nginx源
    $ yum list | grep nginx
  4 安装nignx
    $ yum install nginx -y
    $ nginx -v # 查看版本信息
    $ nginx -V # 查看安装的nginx模块包
  5 查看安装目录
    $ rpm -ql nginx

6 日志切割文件
  /etc/logrotate.d.nginx
  对访问日志进行切割
  /var/log/nginx/*.log {
    daily # 每天创建一个新的日志文件
  }

  ls /var/log/nginx/*.log
  /var/log/nginx/access.log   /var/log/nginx/error.log

6.3 主配置文件
  /etc/nginx/nginx.conf # 核心配置文件
  /etc/nginx/conf.d/default.conf # 默认http服务配置文件

6.8 nginx模块目录
  /etc/nginx/modules # 最基本的共享库和内核模块
     目的是存放用于启动系统和执行root文件系统的命令的。
     如: /bin 和 /sbin 的二进制文件的共享库，或者存放32位，或者64位(file命令查看)
6.9 nginx的手册和帮助文件 # 没有什么用
  /usr/share/doc/nginx-1.14.2 # 帮助文档
  /usr/share/doc/nginx-1.14.2/COPYRIGHT # 版权声明
  /usr/share/man/man8/nginx.8.gz # 手册
6.10 缓存目录
  /var/cache/nginx # nginx的缓存目录
6.11 日志目录
  /var/log/nginx # ngixn的日志目录
6.12 可执行命令
  nginx 服务的启动管理的可执行文件
  /usr/sbin/nginx # 可执行命令 最核心的文件
  /usr/sbin/nginx-debug # 调试执行可执行命令
  $ ll /usr/sbin/nginx
  -> -rwxr-xr-x 1 root root 1377720 11月 16 23:03 /usr/sbin/nginx # 文件的读写都有x
7 看图/statics/nginx/13 nnginx编译参数.jpg
8 查看nginx pid
  $ ps -ef | grep nginx
9 杀死指定进程
  $ kill -9 12345 # 12345 为制定的pid
10 指定用户 # 权限越小越好 -> 安全
  设置nginx进程启动的用户和用户组
  --user=nginx # 指定用户
  --group=nginx # 指定用户组
11 设置额外参数
  设置额外的参数将被添加到 CFLAGS 变量
  CFLAGS 变量用来存放c语言编译时的优化参数
  --with-cc-opt='-o2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong'

12 添加备注
  /etc/nginx/nginx.conf # 主配置文件

------------------------------------------------------------------------
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types; # 包含内容和文件名后缀的对应关系
    default_type  application/octet-stream; # 默认的Content-Type 

    # 定义一个日志格式 main 
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      ' "$http_x_forwarded_for" ';
                      # "$http_user_agent"

    access_log  /var/log/nginx/access.log  main; # 指定访问日志的存放位置，格式为 main(与上面的一致)

    sendfile        on; # 零拷贝模式
    #tcp_nopush     on; # tcp不推 有一定的缓存

    keepalive_timeout  65; # 活动链接的超时间 秒

    #gzip  on; # 是否压缩 -> 后端解压

    include /etc/nginx/conf.d/*.conf; # 包含其他配置文件


}

------------------------------------------------------------------------


/etc/nginx/nginx.d/default.conf 默认一个服务的配置文件备注

------------------------------------------------------------------------
server { # 每个server 对应一个网站
  listen       80; # 监听的端口号
  server_name  localhost; # 也可以写域名，或者ip ，也可写多个:指定的ip访问

  #charset utf-8; # 指定字符集
  #access_log  /var/log/nginx/host.access.log  main; # 指定访问日志的位置和格式

  location / { # 匹配所有的路径 此处有5个规则级别，需仔细些
      root   /usr/share/nginx/html; # 静态文件根目录 
      index  index.html index.htm; # 索引文档
  }

  #error_page  404              /404.html; # 错误页面。如果返回的状态码是404的话，会重定向到 /404.html 页面

  # redirect server error pages to the static page /50x.html # 服务端错误页面 重定向到静态页面 50x.html 页面
  #
  error_page   500 502 503 504  /50x.html;

  # 等号为精准匹配，优先级最高
  # 当浏览器中url为 /50x.html 的路径时，访问 /usr/share/nginx/html/50x.html 文件
  location = /50x.html { 
      root   /usr/share/nginx/html;
  }

  # proxy the PHP scripts to Apache listening on 127.0.0.1:80
  #  如果访问的文件名是 .php 结尾的话，会把请求转发给 http://127.0.0.1
  #location ~ \.php$ {
  #    proxy_pass   http://127.0.0.1;
  #}

  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  # 如果访问的文件名是 .php 结尾的话，会把请求转发给 http://127.0.0.1:9000
  #location ~ \.php$ {
  #    root           html;
  #    fastcgi_pass   127.0.0.1:9000;
  #    fastcgi_index  index.php;
  #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
  #    include        fastcgi_params;
  #}

  # deny access to .htaccess files, if Apache's document root
  # concurs with nginx's one
  #
  #location ~ /\.ht { # 正则匹配方式
  #    deny  all; # 禁止所有访问
  #}
}
------------------------------------------------------------------------

systemctl
监视和控制systemd 的主要命令是 systemctl
该命令可用于查看系统状态和管理系统及服务
- 启动 systemctl start nginx.servie
- 停止 systemctl stop nginx.servie
- 重启 systemctl restart nginx.servie
- 状态 systemctl status nginx.servie
- 重新加载 systemctl reload nginx.servie
nginx -s reload